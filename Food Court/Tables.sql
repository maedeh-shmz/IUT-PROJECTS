
CREATE TABLE BRANCHES (
	BRANCH_ID INTEGER NOT NULL,
	NAME VARCHAR(20) DEFAULT 'NULL',
	MANAGER VARCHAR(20) DEFAULT 'NULL',
	HUMAN_CREW_NUMBER TINYINT DEFAULT 0,
	PHONE_NUMBER BIGINT DEFAULT 0,
	ADDRESS VARCHAR(200) DEFAULT 'NULL',
	PRIMARY KEY (BRANCH_ID)
);



CREATE TABLE CUSTOMER (
	ID INTEGER IDENTITY(1,1) NOT NULL,
	NATIONAL_CODE INTEGER NOT NULL,
	NAME_FAMILY VARCHAR(40) NOT NULL,
	PHONE_NUMBER BIGINT NOT NULL,
	DATE_OF_REGISTER DATE NOT NULL,
	PRIMARY KEY (ID)
);




CREATE TABLE SERVICE_FORCE (
	NATIONAL_CODE INTEGER NOT NULL,
	ID INTEGER IDENTITY(5000,1) NOT NULL,
	NAME_FAMILY VARCHAR(40) NOT NULL,
	GENDER VARCHAR(6) CHECK (GENDER IN ('male','female')) NOT NULL ,
	PHONE_NUMBER BIGINT NOT NULL,
	ADDRESS VARCHAR(50) NOT NULL,
	POSITION VARCHAR(10) CHECK (POSITION IN ('chef','manager','accountant')) NOT NULL,
	BRANCH_ID INTEGER NOT NULL,
	SALARY DECIMAL(10,2) NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES (BRANCH_ID)
);	



CREATE TABLE SALESORDERHEADER (
	SALESORDER_ID INTEGER  NOT NULL,
	CUSTOMER_ID INTEGER NOT NULL,
	STATUS BIT,-- 0 IF NOTCOMPLETE AND 1 IF COMPLETED
	DATE_TIME DATETIME  NOT NULL,
	SUB_TOTAL DECIMAL(8,2) NOT NULL,
	DUE_TOTAL DECIMAL(8,2) NOT NULL,
	RECIEVE_ADDRESS VARCHAR(50) NOT NULL,
	PRIMARY KEY (SALESORDER_ID),
	FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (ID)
);


CREATE TABLE SALESORDERDETAIL (
	SALESORDER_ID INTEGER NOT NULL,
	SALESORDERDETAIL_ID INTEGER IDENTITY(1,1) NOT NULL,
	FOOD_ID TINYINT NOT NULL,
	ORDERQTY INTEGER NOT NULL,
	UNIT_PRICE DECIMAL(8,2) NOT NULL,
	LINE_TOTAL DECIMAL(8,2) NOT NULL,
	PRIMARY KEY (SALESORDERDETAIL_ID),
	--FOREIGN KEY (SALESORDER_ID) REFERENCES  SALESORDERHEADER(SALESORDER_ID),
	FOREIGN KEY (FOOD_ID) REFERENCES FOOD_PRICES (FOOD_ID)
);


CREATE TABLE FOOD_PRICES (
	FOOD_ID TINYINT NOT NULL,
	NAME VARCHAR(20) NOT NULL,
	PRICE_IN_RIAL INTEGER NOT NULL,
	PRIMARY KEY (FOOD_ID),
	
);


CREATE TABLE COMMENT (
	COMMENT_ID INTEGER IDENTITY(1,1) NOT NULL,
	CUSTOMER_ID INTEGER NOT NULL,
	FOOD_ID TINYINT NOT NULL,
	RECOMMENDED BIT DEFAULT 1, -- 0 IF NOTRECOMMENDED AND 1 IF RECOMMENDED
	COMMENTTEXT TEXT,
	COMMENTTIME DATETIME NOT NULL,
	PRIMARY KEY (COMMENT_ID),
	FOREIGN KEY (FOOD_ID) REFERENCES FOOD_PRICES(FOOD_ID),
	FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(ID)
);


CREATE TABLE FOOD_REPORT (
	FOOD_ID TINYINT NOT NULL,
	TOTAL_SALES INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (FOOD_ID),
	FOREIGN KEY (FOOD_ID) REFERENCES FOOD_PRICES(FOOD_ID)
);


CREATE TABLE INVENTORY (
	BRANCH_ID INTEGER NOT NULL,
	[DATE] DATE NOT NULL,
	COMMODITY_1 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_2 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_3 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_4 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_5 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_6 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_7 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_8 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_9 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_10 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_11 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_12 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_13 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_14 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_15 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_16 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_17 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_18 INTEGER DEFAULT 0 NOT NULL,
	COMMODITY_19 INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (BRANCH_ID,[DATE]),
	FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(BRANCH_ID)
);



CREATE TABLE FIXED_CUSTOMER (
	ID INTEGER NOT NULL,
	TOTAL_PARCHASE INTEGER NOT NULL,
	POPULARITY_STATUS VARCHAR(8) CHECK (POPULARITY_STATUS IN 
	('WEAK','MODERATE','GREAT')) NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (ID) REFERENCES CUSTOMER(ID)
);
