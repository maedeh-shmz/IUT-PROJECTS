
CREATE VIEW SEE_FOODS_WITH_PRICES_AND_REPORT AS
SELECT S.FOOD_ID,NAME,PRICE_IN_RIAL,Sales_In_WEEK,Sales_In_Month,Sales_In_YEAR
FROM FOOD_PRICES AS S INNER JOIN FOOD_REPORT 
ON S.FOOD_ID=FOOD_REPORT.FOOD_ID

test:
select *
from SEE_FOODS_WITH_PRICES_AND_REPORT

---------------------------------------------------------------------------------------

CREATE VIEW VIEW_BRANCHES AS
SELECT *
FROM BRANCHES

test:
select *
from VIEW_BRANCHES
----------------------------------------------------------------------------------------

CREATE VIEW SEE_FIXED_CUSTOMER AS
SELECT *
FROM FIXED_CUSTOMER

TEST:
	SELECT *
	FROM SEE_FIXED_CUSTOMER

----------------------------------------------------------------------------------------

CREATE VIEW RATING_USER AS
SELECT CUSTOMER_ID , COUNT(CUSTOMER_ID) AS TOTAL_COUNT , SUM(SUB_TOTAL) AS TOTAL_PURCHASE
FROM SALESORDERHEADER
GROUP BY CUSTOMER_ID

TEST:
	SELECT *
	FROM RATING_USER

-----------------------------------------------------------------------------------------

CREATE VIEW PROFIT_REPORT AS
SELECT SERVICE_PROVIDER ,[1] AS COMMODITY_1,[2] AS COMMODITY_2,[3] AS COMMODITY_3,[4] AS COMMODITY_4,
[5] AS COMMODITY_5,[6] AS COMMODITY_6,[7] AS COMMODITY_7,[8] AS COMMODITY_8,[9] AS COMMODITY_9,
[10] AS COMMODITY_10,[11] AS COMMODITY_11,[12] AS COMMODITY_12,[13] AS COMMODITY_13,[14] AS COMMODITY_14,
[15] AS COMMODITY_15,[16] AS COMMODITY_16,[17] AS COMMODITY_17,[18] AS COMMODITY_18,[19] AS COMMODITY_19

FROM (SELECT S1.SALESORDER_ID,FOOD_ID,ORDERQTY,SERVICE_PROVIDER 
		FROM SALESORDERDETAIL AS S1 INNER JOIN 
		SALESORDERHEADER AS S2 ON S1.SALESORDER_ID=S2.SALESORDER_ID) SALES
PIVOT (
	SUM (ORDERQTY)
	FOR FOOD_ID IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19])
) AS PVT


------------------------------------------------------------------------------------

CREATE FUNCTION SEE_SPECIALCITY_BRANCHES(@CITYNAME VARCHAR(7))
RETURNS TABLE
AS
RETURN
	SELECT *
	FROM BRANCHES
	WHERE @CITYNAME=SUBSTRING(ADDRESS,1,LEN(@CITYNAME))


test:
select *
from SEE_SPECIALCITY_BRANCHES('Isfahan')
union
select *
from SEE_SPECIALCITY_BRANCHES('Tehran')


-------------------------------------------------------------------------------------

CREATE PROCEDURE ADD_COMMENT 
@CUSTOMER_ID INTEGER,
@FOOD_ID TINYINT,
@SUGGEST BIT,
@TEXT TEXT
AS
BEGIN
	INSERT INTO COMMENT (CUSTOMER_ID,FOOD_ID,RECOMMENDED,COMMENTTEXT,COMMENTTIME)
	VALUES (@CUSTOMER_ID,@FOOD_ID,@SUGGEST,@TEXT,GETDATE())
END

TEST:
EXEC ADD_COMMENT 10,16,1,'SO GOOD';


-------------------------------------------------------------------------------------


CREATE FUNCTION CHECK_INFO (@ID INTEGER)
RETURNS TABLE 
AS
RETURN
	SELECT *
	FROM CUSTOMER
	WHERE ID=@ID

TEST:
SELECT *
FROM CHECK_INFO(10)

--------------------------------------------------------------------------------------


CREATE PROCEDURE GET_PROFIT_OF_SPECIAL_TIME
@IN1 DATETIME,
@IN2 DATETIME,
@OUT DECIMAL (10,2) OUTPUT
AS 
BEGIN
	SET @OUT= ( SELECT SUM(SUB_TOTAL) AS TOTAL_SALARY FROM SALESORDERHEADER
		     WHERE DATE_TIME<=@IN2 AND DATE_TIME>=@IN1)
END

TEST:
	DECLARE @OUT DECIMAL (10,2)
	EXEC GET_PROFIT_OF_SPECIAL_TIME '2020-07-17 13:38:39.700','2020-07-17 13:48:09.047',@OUT OUTPUT
	SELECT @OUT
---------------------------------------------------------------------------------------

CREATE PROCEDURE UPDATE_INVENTORY 
@BRANCH_ID INTEGER,
@C1 INTEGER,@C2 INTEGER,@C3 INTEGER,@C4 INTEGER,@C5 INTEGER,@C6 INTEGER,
@C7 INTEGER,@C8 INTEGER,@C9 INTEGER,@C10 INTEGER,@C11 INTEGER,@C12 INTEGER,
@C13 INTEGER,@C14 INTEGER,@C15 INTEGER,@C16 INTEGER,@C17 INTEGER,@C18 INTEGER,
@C19 INTEGER
AS
BEGIN
	INSERT INTO INVENTORY VALUES(@BRANCH_ID,CONVERT(DATE,GETDATE()),
	@C1,@C2,@C3,@C4,@C5,@C6,@C7,@C8,@C9,@C10,@C11,@C12,@C13,
	@C14,@C15,@C16,@C17,@C18,@C19)
END

TEST:
	EXEC UPDATE_INVENTORY 216,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19

---------------------------------------------------------------------------------------

CREATE FUNCTION SHOW_INVENTORY(@BRANCH_ID INTEGER)
RETURNS TABLE	
AS
RETURN
	SELECT *
	FROM INVENTORY
	WHERE [DATE]=CONVERT(DATE,GETDATE()) AND BRANCH_ID=@BRANCH_ID

test:
select *
from SHOW_INVENTORY(211)
---------------------------------------------------------------------------------------

CREATE FUNCTION SEE_EMPLOYEES_OF_A_BRANCH(@BRANCH_ID INTEGER)
RETURNS TABLE 
AS 
RETURN
	SELECT *
	FROM SERVICE_FORCE 
	WHERE BRANCH_ID=@BRANCH_ID

TEST:
	SELECT *
	FROM SEE_EMPLOYEES_OF_A_BRANCH(2120)
---------------------------------------------------------------------------------------

CREATE PROCEDURE ORDERING
@BRANCH_ID INTEGER,
@COMMODITY_ID TINYINT,
@NUMBER TINYINT,
@END_OR_NOT BIT ,-- 1 IF THIS IS THE END
@SALESORDER_ID INTEGER ,
@CUSTOMER_ID INTEGER,
@ADDRESS VARCHAR(50)
AS 
BEGIN

  IF(@END_OR_NOT=1) BEGIN 
    DECLARE @SUB_TOTAL DECIMAL (8,2)
    DECLARE @DUE_TOTAL DECIMAL (8,2)
    SET @SUB_TOTAL = (SELECT SUM(LINE_TOTAL) 
            FROM SALESORDERDETAIL 
            WHERE SALESORDER_ID=@SALESORDER_ID)
    SET @DUE_TOTAL=@SUB_TOTAL+@SUB_TOTAL*0.05
    INSERT INTO SALESORDERHEADER VALUES 
    (@SALESORDER_ID,@CUSTOMER_ID,1,GETDATE(),@SUB_TOTAL,@DUE_TOTAL,@ADDRESS)
  END -- END 

  ELSE BEGIN -- NOT ENDED 

  DECLARE @DATE DATE
  DECLARE @UNIT_PRICE DECIMAL (8,2)
  SET @UNIT_PRICE = (SELECT PRICE_IN_RIAL FROM FOOD_PRICES WHERE FOOD_ID=@COMMODITY_ID)
  SET @DATE= CONVERT(DATE,GETDATE()) -- MOJOODIE EMROOZ RO NESHOON BEDE
  --DECLARE @SALESORDER_ID INTEGER
  --SET @SALESORDER_ID = ABS(CHECKSUM(NEWID())% 10000)+1
  DECLARE @TEMP VARCHAR(2)
  DECLARE @C_NAME VARCHAR(15)
  SET @TEMP=CONVERT(varchar(2),@COMMODITY_ID)
  SET @C_NAME=CONCAT('COMMODITY_',@TEMP)
  DECLARE @OUTPUT VARCHAR(20)

  IF(@C_NAME='COMMODITY_19') BEGIN
    UPDATE INVENTORY SET COMMODITY_19=COMMODITY_19-@NUMBER
    WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE  

    INSERT INTO SALESORDERDETAIL VALUES
    (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
        
  END

  IF(@C_NAME='COMMODITY_18') BEGIN
      UPDATE INVENTORY SET COMMODITY_18=COMMODITY_18-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE  
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_17') BEGIN
      UPDATE INVENTORY SET COMMODITY_17=COMMODITY_17-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_16') BEGIN
      UPDATE INVENTORY SET COMMODITY_16=COMMODITY_16-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_15') BEGIN
      UPDATE INVENTORY SET COMMODITY_15=COMMODITY_15-@NUMBER 
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_14') BEGIN
      UPDATE INVENTORY SET COMMODITY_14=COMMODITY_14-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_13') BEGIN
      UPDATE INVENTORY SET COMMODITY_13=COMMODITY_13-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_12') BEGIN
      UPDATE INVENTORY SET COMMODITY_12=COMMODITY_12-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE  
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_11') BEGIN
      UPDATE INVENTORY SET COMMODITY_11=COMMODITY_11-@NUMBER 
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE  
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_10') BEGIN
      UPDATE INVENTORY SET COMMODITY_10=COMMODITY_10-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE  
	  
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END
IF(@C_NAME='COMMODITY_9') BEGIN
      UPDATE INVENTORY SET COMMODITY_9=COMMODITY_9-@NUMBER 
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_8') BEGIN
      UPDATE INVENTORY SET COMMODITY_8=COMMODITY_8-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE  
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_7') BEGIN
      UPDATE INVENTORY SET COMMODITY_7=COMMODITY_7-@NUMBER 
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_6') BEGIN
      UPDATE INVENTORY SET COMMODITY_6=COMMODITY_6-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_5') BEGIN
      UPDATE INVENTORY SET COMMODITY_5=COMMODITY_5-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_4') BEGIN
      UPDATE INVENTORY SET COMMODITY_4=COMMODITY_4-@NUMBER 
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_3') BEGIN
      UPDATE INVENTORY SET COMMODITY_3=COMMODITY_3-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_2') BEGIN
      UPDATE INVENTORY SET COMMODITY_2=COMMODITY_2-@NUMBER 
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END

  IF(@C_NAME='COMMODITY_1') BEGIN
      UPDATE INVENTORY SET COMMODITY_1=COMMODITY_1-@NUMBER
      WHERE BRANCH_ID=@BRANCH_ID AND [DATE]=@DATE 
      INSERT INTO SALESORDERDETAIL VALUES (@SALESORDER_ID,@COMMODITY_ID,@NUMBER,@UNIT_PRICE,@NUMBER*@UNIT_PRICE)
  END
  END -- ELSE NOT ENDED
END


TEST:

EXEC ORDERING 216,10,2,0,14,5,'Tehran,Poonak'
EXEC ORDERING 216,8,1,0,14,5,'Tehran,Poonak'
EXEC ORDERING 0,0,0,1,14,5,'Tehran,Poonak'

-------------------------------------------------------------------------------------

CREATE PROCEDURE ADD_IN_FIXED_USER 
AS 
BEGIN 
	INSERT INTO FIXED_CUSTOMER
	 SELECT CUSTOMER_ID,TOTAL_PURCHASE,
		CASE 
			WHEN TOTAL_COUNT>20 THEN 'GREAT'
			WHEN (10<TOTAL_COUNT AND TOTAL_COUNT<20) THEN 'MODERATE'
			WHEN  TOTAL_COUNT<10 THEN 'WEAK'
		END AS "POPULARITY_STATUS"
	 FROM RATING_USER
END

TEST:
	EXEC ADD_IN_FIXED_USER 
	
	SELECT *
	FROM FIXED_CUSTOMER

---------------------------------------------------------------------------------------


CREATE PROCEDURE COMMODITY_REPORT 
@COMMODITY_ID TINYINT
AS 
BEGIN
	DECLARE @TEMP VARCHAR(2)
	DECLARE @C_NAME VARCHAR(15)
	SET @TEMP=CONVERT(varchar(2),@COMMODITY_ID)
	SET @C_NAME=CONCAT('COMMODITY_',@TEMP)
	
	IF(@C_NAME='COMMODITY_19') BEGIN
		SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_19) AS [COUNT]
		FROM INVENTORY
		GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))		
	END

	IF(@C_NAME='COMMODITY_18') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_18) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_17') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_17) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_16') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_16) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_15') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_15) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_14') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_14) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_13') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_13) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_12') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_12) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_11') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_11) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_10') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_10) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_9') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_9) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_8') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_8) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_7') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_7) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_6') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_6) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_5') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_5) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_4') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_4) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_3') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_3) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_2') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_2) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END

	IF(@C_NAME='COMMODITY_1') BEGIN
			SELECT [DATE],BRANCH_ID ,SUM(COMMODITY_1) AS [COUNT]
			FROM INVENTORY
			GROUP BY GROUPING SETS(ROLLUP([DATE],BRANCH_ID))
	END
END


EXEC COMMODITY_REPORT 1
